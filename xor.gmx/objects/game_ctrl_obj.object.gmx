<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>spr_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//health=100&#13;
health=100&#13;
paused=false&#13;
electricEffectStarted=false&#13;
healthbarExpansion=0&#13;
x=(room_width/2)-(sprite_width/2)&#13;
instance_create(x+(sprite_width/2),y+(sprite_height*2),backdrop_animation_obj)&#13;
spawnedItemAlpha=0&#13;
randomize()&#13;
length=1&#13;
pointeryoffset=0&#13;
pointeryinc=1&#13;
part=noone&#13;
position=0&#13;
confirmed=1&#13;
level=0&#13;
flipping=1&#13;
&#13;
//The value of operand1&#13;
fallingbits=1+irandom(power(2,length)-1)&#13;
&#13;
//The value of operand2&#13;
recievingbits=1+irandom(power(2,length)-1)&#13;
&#13;
distancebetween=(sprite_height*image_yscale)*8&#13;
&#13;
electric_animation_index=0&#13;
startfallblockdelay=2*room_speed&#13;
fallblockdelay=2*room_speed&#13;
//This controls the falling blocks' speed&#13;
alarm[0]=fallblockdelay&#13;
&#13;
//This controls the speed of the flashing and &#13;
//the frequency of checking whether to flash &#13;
//*lennyface*&#13;
alarm[1]=1+((alarm[0]/32)*3)</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="1" eventtype="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if distancebetween&lt;=(sprite_height*image_yscale) and distancebetween&gt;0
{
    //Make the bits flip like crazy
    if global.evaluationFlashing
    {
        flipping=not flipping
        //background_color=~background_color
    }
    //Sound effect
    if not electricEffectStarted
    {
        audio_play_sound(electricEffect_snd, 75, false)
        electricEffectStarted=true
    }
}
//Goes faster the closer it is to doing the final drop
alarm[1]=1+((alarm[0]/32)*3)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distancebetween-=(sprite_height*image_yscale)&#13;
if distancebetween&lt;sprite_height&#13;
{&#13;
	audio_stop_sound(electricEffect_snd)&#13;
	electricEffectStarted=false&#13;
	&#13;
	spawnedItemAlpha=0&#13;
	&#13;
	if power(2,length+1)-1=(fallingbits^recievingbits)&#13;
	{&#13;
		//If we've used 31 bits let's not make that higher in case&#13;
		//we decide to compile for 32-bit systems.&#13;
		//Instead, let's make things a bit harder by speeding them up&#13;
		if length&lt;31&#13;
		{&#13;
			length++&#13;
		}&#13;
		//If fallblock delay is lower than 1 the timer will just turn off&#13;
		//so we want to prevent that&#13;
		else if fallblockdelay&gt;0 &#13;
		{&#13;
			fallblockdelay--&#13;
		}&#13;
		//If the player gets a correct combo increase the level&#13;
		level+=1&#13;
	}&#13;
	else&#13;
	{&#13;
		//if it's not right find all the mistakes and punish the player&#13;
		for (i=0;i&lt;=length;i++) &#13;
		{&#13;
			if not (((fallingbits&gt;&gt;(i))&amp;1)^((recievingbits&gt;&gt;(i))&amp;1)) &#13;
			{&#13;
				part=instance_create(x+((sprite_width*image_xscale)*((length/2)-i+0.5)),y+((sprite_height*image_yscale)/2),brokenmistake_obj) &#13;
				part.image_index=((fallingbits&gt;&gt;i)&amp;1)^((recievingbits&gt;&gt;i)&amp;1) &#13;
			} &#13;
		}&#13;
	}&#13;
	//RESET!&#13;
	//The value of operand1&#13;
	fallingbits=1+irandom(power(2,length)-1)&#13;
	&#13;
	//The value of operand2&#13;
	recievingbits=1+irandom(power(2,length)-1)&#13;
	&#13;
	distancebetween=(sprite_height*image_yscale)*8&#13;
	&#13;
	//This lets us scale as the game goes on so we can fit everything on the page&#13;
	//image_xscale=1/length&#13;
	//image_yscale=1/length&#13;
	//&#13;
}&#13;
alarm[0]=fallblockdelay</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not paused
{
//Scroll through the bits
if keyboard_check_pressed(vk_left) or keyboard_check_pressed(ord('A'))
{
position--
if position&lt;0
{
position=length
}
}
else if keyboard_check_pressed(vk_right) or keyboard_check_pressed(ord('D'))
{
position++
if position&gt;length
{
position=0
}
}

//Flip the selected bit
if (keyboard_check_pressed(vk_space) or keyboard_check_pressed(vk_up)) and (distancebetween&gt;=(sprite_height*image_yscale))
{
fallingbits=fallingbits^(1&lt;&lt;position)
}

//Let's speed things up a little if a user already has a solution ready
if (keyboard_check(vk_down) or keyboard_check(ord('S'))) and alarm[0]&gt;5 and distancebetween&gt;sprite_height
{
alarm[0]=5
}

if pointeryoffset&gt;(sprite_height*image_yscale)/4
{
pointeryinc--
}
else if pointeryoffset&lt;0
{
pointeryinc++
}

//Pause menu
if keyboard_check_pressed(vk_escape)
{
paused=true
global.remainingfalltime=game_ctrl_obj.alarm[0]
instance_create(x,y,pause_menu_obj)
alarm[0]=-1
alarm[1]=-1
}

pointeryoffset+=pointeryinc

if electric_animation_index&lt;sprite_get_number(electric_animation_spr)
{
electric_animation_index++
}
else
{
electric_animation_index=0
}

if spawnedItemAlpha&lt;1
{
spawnedItemAlpha+=0.025
}

if health&lt;=0
{
dealth_obj=instance_create(x,y,death_summary_obj)
dealth_obj.level=level
instance_destroy()
}

if healthbarExpansion&lt;room_width/4*2
{
healthbarExpansion+=10
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(game_fnt)
draw_set_color(c_white)
draw_bits(fallingbits,x,y,1)
draw_bits(recievingbits,x,y-distancebetween,spawnedItemAlpha)

//Show the electricity if we're about to go, because it looks awesome
if distancebetween&lt;sprite_height*2 and distancebetween&gt;=sprite_height
{
	for (i=0;i&lt;=length;i++)
	{
		draw_sprite_ext(electric_animation_spr,electric_animation_index,x+((sprite_width*image_xscale)*
		((length/2)-i)),y,image_xscale, image_yscale, image_angle, image_blend, 1)
		
		//draw_text(argument1+((sprite_width*image_xscale)*((length/2)-i)),argument2,string((argument0&gt;&gt;(length-i))&amp;1))
	}
}

//gold
draw_set_color(make_color_rgb($80,$88,$00))
//outline of the level thing
draw_rectangle(29,61,131,99,false)
//outline of the healthbar
draw_rectangle(((room_width/4*2)-healthbarExpansion/2)-3,(room_height/32)-3,((room_width/4*2)+healthbarExpansion/2)+3,(room_height/32*2)+3,false)
//inner rectangle of level thing
draw_set_color(c_black)
draw_rectangle(32,64,128,96,false)
//healthbar
draw_healthbar_color((room_width/4*2)-healthbarExpansion/2,room_height/32,(room_width/4*2)+healthbarExpansion/2,room_height/32*2,health,c_lime,c_green,c_red,c_maroon)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_set_color(c_white)
draw_text(room_width/2,room_height/32*1.5,string(health)+"%")
//reset stuff so we don't mess up other drawing
draw_set_halign(fa_left)
draw_set_valign(fa_top)
//level
draw_text(49,70,"Level: "+string(level))
//pointer stuff
draw_sprite_ext(bitflip_spr,0,x+((sprite_width*image_xscale)*(position-(length/2))),y+(sprite_height*image_yscale)+pointeryoffset,image_xscale, image_yscale, image_angle, image_blend, true);
draw_text(x+((sprite_width*image_xscale)*(position-(length/2))),y+((sprite_height*image_yscale)/2)+pointeryoffset+25,dec2hex(position))</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
